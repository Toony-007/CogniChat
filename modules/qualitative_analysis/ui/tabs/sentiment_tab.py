"""
Tab de An√°lisis de Sentimientos
Interfaz de usuario para an√°lisis de polaridad y subjetividad
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from typing import List, Dict, Any, Optional
from datetime import datetime

from ...extractors.sentiment_extractor import SentimentExtractor, SentimentAnalysisResult
from ...core.config import AnalysisConfig
from ..components.educational import (
    show_methodology_box,
    show_interpretation_guide,
    show_citation_box,
    show_statistics_panel
)


def render_sentiment_tab(chunks: List[Dict[str, Any]], config: AnalysisConfig):
    """
    Renderizar tab de an√°lisis de sentimientos
    
    Args:
        chunks: Lista de chunks de texto para an√°lisis
        config: Configuraci√≥n del an√°lisis
    """
    
    # T√≠tulo con descripci√≥n
    st.markdown("""
    <div style="
        background: linear-gradient(90deg, #e74c3c 0%, #c0392b 100%);
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        text-align: center;
    ">
        <h1 style="color: white; margin: 0; font-size: 2rem;">üòä An√°lisis de Sentimientos</h1>
        <p style="color: white; margin: 0.5rem 0 0 0; font-size: 1.1rem; opacity: 0.9;">
            Identifica emociones profundas y patrones sentimentales con fundamentaci√≥n completa
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Mostrar metodolog√≠a
    show_methodology_box(
        title="Enfoque H√≠brido: Algoritmo + DeepSeek R1",
        description="""
        **¬øQu√© hace este an√°lisis?**
        
        Este m√≥dulo identifica autom√°ticamente los sentimientos y emociones presentes en tus documentos 
        utilizando un **enfoque h√≠brido** que combina algoritmos avanzados de an√°lisis de sentimientos 
        con inteligencia artificial para generar interpretaciones emocionales profundas y an√°lisis contextuales.
        """,
        steps=[
            "Preprocesamiento: Limpieza y normalizaci√≥n del texto",
            "Vectorizaci√≥n: Conversi√≥n a representaci√≥n num√©rica (TF-IDF)",
            "Algoritmo de An√°lisis: VADER, TextBlob o H√≠brido para extracci√≥n inicial",
            "ü§ñ Refinamiento IA: DeepSeek R1 analiza y mejora las interpretaciones sentimentales",
            "Generaci√≥n de an√°lisis emocionales profundos: Crea interpretaciones acad√©micas significativas",
            "Validaci√≥n: C√°lculo de polaridad mejorada y m√©tricas de confianza",
            "Citaci√≥n: Vinculaci√≥n con fuentes originales",
            "Visualizaci√≥n: An√°lisis temporal y distribuci√≥n emocional"
        ],
        algorithm_info="VADER/TextBlob/H√≠brido + DeepSeek R1 para an√°lisis emocionales profundos"
    )
    
    # Mostrar gu√≠a de interpretaci√≥n
    show_interpretation_guide(
        what_it_means="""
        **¬øQu√© significan estos resultados?**
        
        Los an√°lisis de sentimientos identificados son **interpretaciones emocionales profundas** que emergen de tus documentos. 
        Con el refinamiento IA, cada an√°lisis captura emociones espec√≠ficas, intensidades y patrones emocionales 
        complejos que van m√°s all√° de simples clasificaciones positivo/negativo, proporcionando comprensi√≥n matizada 
        del contenido emocional presente en tu investigaci√≥n.
        """,
        how_to_use=[
            "Identifica los patrones emocionales centrales de tu investigaci√≥n",
            "Analiza las interpretaciones generadas por la IA para cada sentimiento",
            "Examina las emociones espec√≠ficas para entender matices emocionales",
            "Estudia los patrones emocionales para entender estructuras sentimentales",
            "Usa las m√©tricas de intensidad y confianza para validar la calidad",
            "Aprovecha los an√°lisis emocionales profundos para desarrollar marcos te√≥ricos",
            "Exporta los resultados para fundamentar tu an√°lisis cualitativo"
        ],
        limitations=[
            "Los an√°lisis generados por IA requieren validaci√≥n del investigador",
            "La calidad depende de la cantidad y diversidad del contenido analizado",
            "El LLM puede generar interpretaciones que sintetizan informaci√≥n no expl√≠cita",
            "Las interpretaciones son an√°lisis que deben ser verificadas",
            "Requiere acceso a un modelo LLM (Ollama) para funcionar completamente"
        ]
    )
    
    # Verificar si hay chunks disponibles
    if not chunks:
        st.warning("‚ö†Ô∏è No hay documentos disponibles para an√°lisis de sentimientos")
        st.info("""
        **Para realizar an√°lisis de sentimientos:**
        1. Aseg√∫rate de que hay documentos procesados en el cache RAG
        2. Los documentos deben contener texto suficiente para an√°lisis
        3. M√≠nimo recomendado: 5 documentos o 500 palabras
        """)
        return
    
    # Mostrar estad√≠sticas de entrada
    st.markdown("#### üìä Estad√≠sticas de Entrada")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "üìÑ Documentos",
            len(set(chunk.get('metadata', {}).get('source_file', 'unknown') 
                   for chunk in chunks)),
            help="N√∫mero de documentos √∫nicos"
        )
    
    with col2:
        st.metric(
            "üìù Chunks",
            len(chunks),
            help="N√∫mero total de fragmentos de texto"
        )
    
    with col3:
        st.metric(
            "üìñ Palabras Estimadas",
            sum(len(chunk.get('content', '').split()) for chunk in chunks),
            help="N√∫mero aproximado de palabras"
        )
    
    with col4:
        st.metric(
            "üìÇ Fuentes √önicas",
            len(set(chunk.get('metadata', {}).get('source_file', 'unknown') 
                   for chunk in chunks)),
            help="N√∫mero de fuentes diferentes"
        )
    
    # Configuraci√≥n del an√°lisis
    st.markdown("#### ‚öôÔ∏è Configuraci√≥n del An√°lisis")
    
    st.info("""
    **‚ÑπÔ∏è Configuraci√≥n Autom√°tica:** Los par√°metros del an√°lisis de sentimientos est√°n optimizados autom√°ticamente.
    Si necesitas modificar alg√∫n par√°metro espec√≠fico, puedes hacerlo directamente en el c√≥digo.
    """)
    
    st.divider()
    
    # Botones de an√°lisis
    col1, col2, col3 = st.columns([2, 1, 2])
    
    with col1:
        if st.session_state.get('sentiments_analyzed', False):
            if st.button("üîÑ Nuevo An√°lisis", type="secondary", use_container_width=True, help="Limpiar resultados y realizar nuevo an√°lisis", key="sentiment_new_analysis"):
                # Limpiar session state
                st.session_state.sentiments_analyzed = False
                st.session_state.sentiment_analysis_result = None
                st.session_state.sentiment_extractor = None
                st.session_state.sentiments_summary = None
                st.rerun()
    
    with col2:
        if not st.session_state.get('sentiments_analyzed', False):
            analyze_button = st.button(
                "üöÄ Analizar Sentimientos",
                type="primary",
                use_container_width=True,
                help="Iniciar an√°lisis h√≠brido de sentimientos",
                key="sentiment_analyze"
            )
        else:
            analyze_button = False
    
    with col3:
        if st.session_state.get('sentiments_analyzed', False):
            st.success("‚úÖ An√°lisis completado")
    
    # Realizar an√°lisis solo si se presiona el bot√≥n Y no hay resultados previos
    if analyze_button and not st.session_state.get('sentiments_analyzed', False):
        with st.spinner("üòä Analizando sentimientos con enfoque h√≠brido..."):
            try:
                # Crear extractor
                extractor = SentimentExtractor(config)
                
                # Ejecutar an√°lisis h√≠brido
                result = extractor.analyze_sentiments_hybrid(chunks)
                
                # Guardar en session state
                st.session_state.sentiments_analyzed = True
                st.session_state.sentiment_analysis_result = result
                st.session_state.sentiment_extractor = extractor
                
                # Obtener resumen
                summary = extractor.get_sentiment_summary(result)
                st.session_state.sentiments_summary = summary
                
                # Forzar re-ejecuci√≥n para mostrar resultados
                st.rerun()
                
            except Exception as e:
                st.error(f"‚ùå **Error en el an√°lisis:** {str(e)}")
                st.exception(e)
                return
    
    # Mostrar resultados si existen
    if st.session_state.get('sentiments_analyzed', False):
        result = st.session_state['sentiment_analysis_result']
        summary = st.session_state.get('sentiments_summary', {})
        
        render_sentiment_results(result, summary, chunks)


def render_sentiment_results(result: SentimentAnalysisResult, summary: Dict[str, Any], chunks: List[Dict[str, Any]]):
    """
    Renderizar resultados del an√°lisis de sentimientos
    
    Args:
        result: Resultado del an√°lisis de sentimientos
        summary: Resumen estad√≠stico del an√°lisis
        chunks: Chunks originales para referencias
    """
    st.markdown("#### üìä Resultados del An√°lisis de Sentimientos")
    
    # Mostrar resumen del an√°lisis
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Textos Analizados", summary.get('total_sentiments', 0))
    
    with col2:
        st.metric("Polaridad Promedio", f"{summary.get('avg_polarity', 0.0):.3f}")
    
    with col3:
        st.metric("Subjetividad Promedio", f"{summary.get('avg_subjectivity', 0.0):.3f}")
    
    with col4:
        st.metric("Algoritmo", summary.get('algorithm_used', 'unknown'))
    
    # Tabs para diferentes vistas de resultados
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìã Sentimientos Principales",
        "üìä Visualizaciones", 
        "üîó An√°lisis por Fuente",
        "üíæ Exportar"
    ])
    
    with tab1:
        render_sentiments_list(result)
    
    with tab2:
        render_sentiment_visualizations(result)
    
    with tab3:
        render_sentiment_by_source(result)
    
    with tab4:
        render_sentiment_export(result)


def render_sentiments_list(result: SentimentAnalysisResult):
    """Renderizar lista de sentimientos identificados"""
    st.markdown("#### üìã Sentimientos Principales")
    
    if not result.sentiments:
        st.info("No se encontraron sentimientos para mostrar")
        return
    
    # Crear DataFrame para mostrar sentimientos
    sentiments_data = []
    for i, sentiment in enumerate(result.sentiments):
        sentiments_data.append({
            'ID': i + 1,
            'Texto': sentiment.text[:100] + "..." if len(sentiment.text) > 100 else sentiment.text,
            'Sentimiento': sentiment.sentiment_label,
            'Polaridad': f"{sentiment.polarity:.3f}",
            'Subjetividad': f"{sentiment.subjectivity:.3f}",
            'Confianza': f"{sentiment.confidence:.3f}",
            'Contexto': sentiment.context[:50] + "..." if len(sentiment.context) > 50 else sentiment.context
        })
    
    df = pd.DataFrame(sentiments_data)
    
    # Mostrar tabla con sentimientos
    st.dataframe(df, use_container_width=True)
    
    # Mostrar detalles de cada sentimiento
    st.markdown("#### üîç Detalles de Sentimientos")
    
    for i, sentiment in enumerate(result.sentiments[:10]):  # Mostrar solo los primeros 10
        with st.expander(f"**Sentimiento {i+1}: {sentiment.sentiment_label.upper()}**"):
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**Texto Completo:**")
                st.text_area("Texto", sentiment.text, height=100, disabled=True, label_visibility="collapsed", key=f"sentiment_text_{i}")
                
                st.markdown("**Contexto:**")
                st.info(sentiment.context)
            
            with col2:
                st.markdown("**M√©tricas:**")
                st.metric("Polaridad", f"{sentiment.polarity:.3f}")
                st.metric("Subjetividad", f"{sentiment.subjectivity:.3f}")
                st.metric("Confianza", f"{sentiment.confidence:.3f}")
                
                # Barra de progreso para visualizar polaridad
                if sentiment.polarity > 0:
                    st.progress(sentiment.polarity, text=f"Positivo: {sentiment.polarity:.1%}")
                else:
                    st.progress(abs(sentiment.polarity), text=f"Negativo: {abs(sentiment.polarity):.1%}")
            
            # Mostrar citaciones si existen
            if sentiment.citations:
                with st.expander("üìö Ver Citaciones"):
                    for j, citation in enumerate(sentiment.citations[:3], 1):
                        st.markdown(f"**Cita {j}:**")
                        st.markdown(f"üìÑ **Fuente:** {citation.get('source_file', 'unknown')}")
                        st.markdown(f"üìù **Contenido:** {citation.get('content', '')[:200]}...")
                        st.markdown(f"üîó **Chunk:** {citation.get('chunk_id', 0)}")
                        st.markdown("---")


def render_sentiment_visualizations(result: SentimentAnalysisResult):
    """Renderizar visualizaciones de sentimientos"""
    st.markdown("#### üìä Visualizaciones de Sentimientos")
    
    # Crear extractor para generar visualizaciones
    extractor = SentimentExtractor(AnalysisConfig())
    
    try:
        # Generar visualizaciones
        viz_data = extractor.generate_sentiment_visualization(result)
        
        if viz_data:
            # Gr√°fico de distribuci√≥n de sentimientos
            st.plotly_chart(viz_data['distribution_chart'], use_container_width=True)
            
            # Gr√°fico de dispersi√≥n polaridad vs subjetividad
            st.plotly_chart(viz_data['scatter_chart'], use_container_width=True)
            
            # Gr√°fico de confianza
            st.plotly_chart(viz_data['confidence_chart'], use_container_width=True)
            
            # Tabla de datos
            st.markdown("#### üìà Datos de Visualizaci√≥n")
            df_viz = pd.DataFrame(viz_data['sentiments_data'])
            st.dataframe(df_viz, use_container_width=True)
        
    except Exception as e:
        st.error(f"Error generando visualizaciones: {str(e)}")
        st.info("üí° Intenta regenerar el an√°lisis")


def render_sentiment_by_source(result: SentimentAnalysisResult):
    """Renderizar an√°lisis de sentimientos por fuente"""
    st.markdown("#### üîó An√°lisis por Fuente")
    
    # Agrupar sentimientos por fuente
    source_sentiments = {}
    for sentiment in result.sentiments:
        for citation in sentiment.citations:
            source = citation.get('source_file', 'unknown')
            if source not in source_sentiments:
                source_sentiments[source] = []
            source_sentiments[source].append(sentiment)
    
    if not source_sentiments:
        st.info("No hay datos de fuentes disponibles")
        return
    
    # Mostrar an√°lisis por fuente
    for source, sentiments in source_sentiments.items():
        with st.expander(f"üìÑ {source} ({len(sentiments)} sentimientos)"):
            # Calcular estad√≠sticas por fuente
            polarities = [s.polarity for s in sentiments]
            subjectivities = [s.subjectivity for s in sentiments]
            confidences = [s.confidence for s in sentiments]
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Polaridad Promedio", f"{np.mean(polarities):.3f}")
                st.metric("Subjetividad Promedio", f"{np.mean(subjectivities):.3f}")
            
            with col2:
                st.metric("Confianza Promedio", f"{np.mean(confidences):.3f}")
                st.metric("Total Sentimientos", len(sentiments))
            
            with col3:
                # Distribuci√≥n de sentimientos por fuente
                sentiment_counts = {}
                for s in sentiments:
                    sentiment_counts[s.sentiment_label] = sentiment_counts.get(s.sentiment_label, 0) + 1
                
                st.markdown("**Distribuci√≥n:**")
                for label, count in sentiment_counts.items():
                    st.markdown(f"‚Ä¢ {label}: {count}")


def render_sentiment_export(result: SentimentAnalysisResult):
    """Renderizar opciones de exportaci√≥n"""
    st.markdown("#### üíæ Exportar An√°lisis de Sentimientos")
    
    st.markdown("""
    <div style="background: #34495e; padding: 1rem; border-radius: 8px; border-left: 4px solid #e67e22; color: #ecf0f1; margin: 1rem 0;">
        <strong>‚ÑπÔ∏è Exportaci√≥n Completa:</strong> Genera documentos profesionales con todos los sentimientos analizados,
        incluyendo visualizaciones, patrones emocionales y m√©tricas de calidad para uso en tu investigaci√≥n.
    </div>
    """, unsafe_allow_html=True)
    
    # Crear extractor para exportaci√≥n
    from ...extractors.sentiment_extractor import SentimentExtractor
    extractor = SentimentExtractor(AnalysisConfig())
    
    # Opciones de exportaci√≥n
    col1, col2 = st.columns(2)
    
    with col1:
        include_emotions = st.checkbox(
            "Incluir an√°lisis de emociones",
            value=True,
            help="Incluye las emociones espec√≠ficas identificadas por la IA",
            key="sentiment_include_emotions"
        )
    
    with col2:
        include_visualizations = st.checkbox(
            "Incluir datos de visualizaci√≥n",
            value=True,
            help="Incluye m√©tricas de polaridad y subjetividad",
            key="sentiment_include_visualizations"
        )
    
    # Informaci√≥n del documento
    st.markdown("#### üìÑ Informaci√≥n del Documento")
    
    col1, col2 = st.columns(2)
    
    with col1:
        document_title = st.text_input(
            "T√≠tulo del documento",
            value="An√°lisis de Sentimientos",
            help="T√≠tulo que aparecer√° en el documento",
            key="sentiment_document_title"
        )
    
    with col2:
        author_name = st.text_input(
            "Autor",
            value="Investigador",
            help="Nombre del autor del an√°lisis",
            key="sentiment_author_name"
        )
    
    # Botones de exportaci√≥n
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìÑ Generar Documento Word", type="primary", use_container_width=True, key="sentiment_generate_word"):
            try:
                doc_content = _generate_sentiment_word_document(
                    result=result,
                    title=document_title,
                    author=author_name,
                    include_emotions=include_emotions,
                    include_visualizations=include_visualizations
                )
                
                st.download_button(
                    label="üíæ Descargar Documento Word",
                    data=doc_content,
                    file_name=f"{document_title.replace(' ', '_')}.docx",
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                )
                
                st.success("‚úÖ Documento Word generado correctamente")
                
            except Exception as e:
                st.error(f"‚ùå Error al generar documento Word: {str(e)}")
                st.exception(e)
    
    with col2:
        # Exportar datos
        export_data = extractor.export_sentiment_analysis(result, 'json')
        
        if export_data:
            import json
            json_data = json.dumps(export_data, indent=2, ensure_ascii=False)
            
            st.download_button(
                label="üì• Descargar An√°lisis (JSON)",
                data=json_data,
                file_name=f"sentiment_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
    
    # Mostrar resumen de exportaci√≥n
    if export_data:
        st.markdown("#### üìã Resumen de Exportaci√≥n")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Metadatos:**")
            st.json(export_data['metadata'])
        
        with col2:
            st.markdown("**Estad√≠sticas:**")
            st.metric("Total Analizado", len(export_data['sentiments']))
            st.metric("Polaridad Promedio", f"{export_data['metadata']['avg_polarity']:.3f}")
            st.metric("Subjetividad Promedio", f"{export_data['metadata']['avg_subjectivity']:.3f}")
        
        st.info("""
        **üí° Informaci√≥n sobre la exportaci√≥n:**
        
        - **Word**: Documento profesional con sentimientos, emociones y m√©tricas
        - **JSON**: Incluye todos los datos del an√°lisis para procesamiento posterior
        - **Metadatos**: Informaci√≥n sobre el algoritmo y par√°metros utilizados
        - **Emociones**: An√°lisis emocional espec√≠fico identificado por la IA
        - **Estad√≠sticas**: M√©tricas de polaridad y subjetividad
        """)
    
    # Bot√≥n para limpiar resultados
    if st.button("üóëÔ∏è Limpiar Resultados", type="secondary", key="sentiment_clear_results"):
        if 'sentiments_analyzed' in st.session_state:
            del st.session_state.sentiments_analyzed
        if 'sentiment_analysis_result' in st.session_state:
            del st.session_state.sentiment_analysis_result
        if 'sentiment_extractor' in st.session_state:
            del st.session_state.sentiment_extractor
        if 'sentiments_summary' in st.session_state:
            del st.session_state.sentiments_summary
        st.rerun()


def _generate_sentiment_word_document(
    result: SentimentAnalysisResult,
    title: str,
    author: str,
    include_emotions: bool = True,
    include_visualizations: bool = True
) -> bytes:
    """
    Generar documento Word con los sentimientos analizados
    
    Args:
        result: Resultado del an√°lisis de sentimientos
        title: T√≠tulo del documento
        author: Autor del documento
        include_emotions: Si incluir an√°lisis de emociones
        include_visualizations: Si incluir m√©tricas de visualizaci√≥n
        
    Returns:
        Contenido del documento Word como bytes
    """
    try:
        from docx import Document
        from docx.shared import Inches, Pt
        from docx.enum.text import WD_ALIGN_PARAGRAPH
        from docx.enum.style import WD_STYLE_TYPE
        import io
    except ImportError:
        raise ImportError("python-docx es requerido para generar documentos Word. Instala con: pip install python-docx")
    
    # Crear documento
    doc = Document()
    
    # Configurar estilos
    title_style = doc.styles['Title']
    title_style.font.size = Pt(18)
    title_style.font.bold = True
    
    heading_style = doc.styles['Heading 1']
    heading_style.font.size = Pt(14)
    heading_style.font.bold = True
    
    # T√≠tulo del documento
    title_para = doc.add_heading(title, 0)
    title_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    # Informaci√≥n del documento
    doc.add_paragraph(f"Autor: {author}")
    doc.add_paragraph(f"Fecha de generaci√≥n: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    doc.add_paragraph("")
    
    # Resumen ejecutivo
    doc.add_heading("Resumen Ejecutivo", level=1)
    
    summary_text = f"""
    Este documento presenta un an√°lisis cualitativo de sentimientos extra√≠dos de documentos de investigaci√≥n.
    
    Estad√≠sticas del an√°lisis:
    ‚Ä¢ Total de sentimientos analizados: {len(result.sentiments)}
    ‚Ä¢ Algoritmo utilizado: {result.algorithm_used}
    ‚Ä¢ Polaridad promedio: {result.average_polarity:.3f}
    ‚Ä¢ Subjetividad promedio: {result.average_subjectivity:.3f}
    """
    
    doc.add_paragraph(summary_text)
    doc.add_paragraph("")
    
    # Sentimientos principales
    doc.add_heading("Sentimientos Identificados", level=1)
    
    for i, sentiment in enumerate(result.sentiments, 1):
        # T√≠tulo del sentimiento
        sentiment_title = f"{i}. {sentiment.sentiment_label.upper()}"
        doc.add_heading(sentiment_title, level=2)
        
        # Informaci√≥n b√°sica
        info_text = f"""
        Polaridad: {sentiment.polarity:.3f}
        Subjetividad: {sentiment.subjectivity:.3f}
        Confianza: {sentiment.confidence:.3f}
        """
        
        doc.add_paragraph(info_text)
        
        # Texto analizado
        doc.add_heading("Texto Analizado", level=3)
        doc.add_paragraph(str(sentiment.text) if sentiment.text else "No disponible")
        
        # Contexto del sentimiento
        if sentiment.context:
            doc.add_heading("Contexto", level=3)
            doc.add_paragraph(str(sentiment.context) if sentiment.context else "No disponible")
        
        # An√°lisis de emociones
        if include_emotions and sentiment.metadata.get('emociones_especificas'):
            doc.add_heading("Emociones Espec√≠ficas", level=3)
            emociones = sentiment.metadata['emociones_especificas']
            doc.add_paragraph(str(emociones) if emociones else "No disponible")
        
        # Intensidad emocional
        if include_emotions and sentiment.metadata.get('intensidad_emocional'):
            doc.add_heading("Intensidad Emocional", level=3)
            intensidad = sentiment.metadata['intensidad_emocional']
            if isinstance(intensidad, (int, float)):
                doc.add_paragraph(f"Intensidad: {intensidad:.2f}")
            else:
                doc.add_paragraph(str(intensidad))
        
        # Relevancia para la investigaci√≥n
        if sentiment.metadata.get('relevancia_investigacion'):
            doc.add_heading("Relevancia para la Investigaci√≥n", level=3)
            relevancia = sentiment.metadata['relevancia_investigacion']
            doc.add_paragraph(str(relevancia) if relevancia else "No disponible")
        
        # Citas y referencias
        if sentiment.citations:
            doc.add_heading("Referencias", level=3)
            
            for j, citation in enumerate(sentiment.citations[:3], 1):  # M√°ximo 3 citas
                if isinstance(citation, dict):
                    citation_text = f"""
                    Cita {j}:
                    Fuente: {citation.get('source_file', 'unknown')}
                    Contenido: {citation.get('content', '')[:200]}
                    """
                else:
                    citation_text = f"""
                    Cita {j}:
                    Fuente: {citation.source_file}
                    Contenido: {citation.get_full_context(max_chars=200)}
                    """
                doc.add_paragraph(citation_text)
        
        doc.add_paragraph("")  # Espacio entre sentimientos
    
    # An√°lisis estad√≠stico
    if include_visualizations:
        doc.add_heading("An√°lisis Estad√≠stico", level=1)
        
        # Estad√≠sticas por tipo de sentimiento
        sentiment_types = [s.sentiment_label for s in result.sentiments]
        type_counts = {}
        for sent_type in sentiment_types:
            type_counts[sent_type] = type_counts.get(sent_type, 0) + 1
        
        doc.add_heading("Distribuci√≥n por Tipo de Sentimiento", level=2)
        for sent_type, count in type_counts.items():
            doc.add_paragraph(f"‚Ä¢ {sent_type}: {count} an√°lisis")
        
        # Sentimientos m√°s intensos
        doc.add_heading("Sentimientos M√°s Intensos", level=2)
        top_sentiments = sorted(result.sentiments, key=lambda x: abs(x.polarity), reverse=True)[:5]
        
        for i, sent in enumerate(top_sentiments, 1):
            doc.add_paragraph(f"{i}. {sent.sentiment_label} (Polaridad: {sent.polarity:.3f})")
    
    # Guardar en bytes
    doc_bytes = io.BytesIO()
    doc.save(doc_bytes)
    doc_bytes.seek(0)
    
    return doc_bytes.getvalue()
