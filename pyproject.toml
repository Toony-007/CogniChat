[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cognichat"
version = "1.0.0"
description = "Sistema RAG avanzado con anÃ¡lisis cualitativo y procesamiento inteligente de documentos"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "CogniChat Team", email = "contact@cognichat.com"}
]
maintainers = [
    {name = "CogniChat Team", email = "contact@cognichat.com"}
]
keywords = [
    "rag", "retrieval-augmented-generation", "nlp", "machine-learning",
    "document-processing", "qualitative-analysis", "chatbot", "ollama",
    "streamlit", "text-analysis", "clustering", "sentiment-analysis",
    "topic-modeling", "concept-mapping", "visualization"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "streamlit>=1.29.0",
    "streamlit-chat>=0.1.1",
    "requests>=2.31.0",
    "python-dotenv>=1.0.0",
    "pathlib>=1.0.1",
    "psutil>=5.9.0",
    "pypdf>=3.17.0",
    "python-docx>=0.8.11",
    "openpyxl>=3.1.2",
    "pandas>=2.1.0",
    "beautifulsoup4>=4.12.0",
    "loguru>=0.7.0",
    "plotly>=5.17.0",
    "networkx>=3.2.1",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "nltk>=3.8.1",
    "textblob>=0.17.1",
    "wordcloud>=1.9.2",
    "seaborn>=0.12.0",
    "matplotlib>=3.7.0",
    "scipy>=1.11.0",
    "statsmodels>=0.14.0",
    "umap-learn>=0.5.3",
    "hdbscan>=0.8.33",
    "spacy>=3.7.0",
    "transformers>=4.30.0",
    "chromadb>=0.4.0",
    "tqdm>=4.65.0",
    "joblib>=1.3.0",
    "Pillow>=10.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
    "sphinx-autodoc-typehints>=1.20.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
]

[project.scripts]
cognichat = "app:main"
cognichat-check = "scripts.check_dependencies:main"
cognichat-install = "scripts.install_requirements:main"

[project.urls]
Homepage = "https://github.com/cognichat/cognichat"
Documentation = "https://cognichat.readthedocs.io/"
Repository = "https://github.com/cognichat/cognichat.git"
"Bug Tracker" = "https://github.com/cognichat/cognichat/issues"
Changelog = "https://github.com/cognichat/cognichat/blob/main/docs/CHANGELOG.md"

[tool.setuptools]
packages = ["modules"]
include-package-data = true

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.env*", "data/*", "logs/*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["cognichat", "modules"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".tox",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "ignore::DeprecationWarning:importlib._bootstrap",
    "ignore:the load_module\\(\\) method is deprecated:DeprecationWarning",
]

[tool.coverage.run]
source = ["modules", "app.py"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]