El desarrollo del prototipo representa la fase de materialización de la estrategia computacional, un proceso complejo y dinámico donde los principios teóricos de la selección de modelos y el diseño arquitectónico se tradujeron en una herramienta tangible y funcional. Este proceso no siguió un desarrollo lineal y rígido, sino que se fundamentó en una metodología de prototipado iterativo, un enfoque ágil y adaptativo que fue absolutamente fundamental para el éxito del proyecto. Dada la naturaleza intrínsecamente exploratoria y, en muchos casos, impredecible de las funcionalidades de IA implementadas, la capacidad de construir, probar, validar conceptos tempranamente y refinar continuamente las características fue indispensable. Esta aproximación permitió identificar y resolver desafíos técnicos y de usabilidad de manera proactiva, antes de comprometer recursos significativos en el desarrollo completo, asegurando que el producto final estuviera verdaderamente alineado con las necesidades matizadas y exigentes del investigador cualitativo.
Metodología de Prototipado Iterativo: Un Enfoque Ágil y Adaptativo
La metodología de desarrollo se estructuró en ciclos cortos y enfocados de prototipado, cada uno centrado en una funcionalidad específica o un conjunto de características interrelacionadas. Cada ciclo seguía un proceso riguroso que incluía fases de diseño conceptual, implementación rápida, pruebas con usuarios (incluyendo la validación crucial de expertos como el docente Giovanni Hernández) y refinamiento basado en la retroalimentación obtenida. Este enfoque cíclico fue especialmente valioso, ya que permitió una experimentación controlada y empírica con diferentes técnicas de IA, como la optimización de prompts y la selección de contexto relevante, para evaluar su impacto real en la calidad de los resultados. La capacidad de probar rápidamente diferentes enfoques y obtener retroalimentación temprana, un pilar de la metodología Extreme Programming (XP) adoptada, permitió tomar decisiones informadas sobre la dirección del desarrollo, asegurando una evolución constante y coherente del prototipo.
Prototipo Inicial: Validación de Conceptos Fundamentales
El primer paso consistió en la creación de un prototipo inicial, a menudo referido como una prueba de concepto, cuyo objetivo principal era validar los conceptos más fundamentales y de mayor riesgo de la estrategia. Este prototipo implementó una versión simplificada pero funcional del pipeline de procesamiento basado en Recuperación Aumentada por Generación (RAG). Sus funcionalidades básicas incluían:
1. Carga de documentos básicos: Permitía al usuario cargar archivos en formatos comunes como PDF y DOCX.
2. Generación de embeddings: Utilizaba los modelos de código abierto seleccionados (nomic-embed-text) a través de Ollama para convertir el texto en representaciones vectoriales.
3. Consulta y respuesta rudimentaria: Ofrecía un sistema básico donde el investigador podía realizar consultas en lenguaje natural y obtener respuestas generadas por el modelo de IA (Deepseek:r1:7b).
La interfaz de usuario se mantuvo deliberadamente simple, utilizando Streamlit por su capacidad para un desarrollo rápido e iterativo, lo que permitió enfocar la atención en la funcionalidad central en lugar de en la estética. Las pruebas con este prototipo inicial revelaron rápidamente varios desafíos críticos que influyeron significativamente en el desarrollo posterior. La gestión de la memoria para documentos grandes emergió como un problema fundamental, lo que llevó al desarrollo de estrategias de procesamiento por fragmentos (chunks), una característica que se convirtió en un pilar del sistema final. Asimismo, aunque la calidad de las respuestas generadas era prometedora, mostraba inconsistencias que motivaron una investigación más profunda en técnicas de optimización de prompts y selección de contexto relevante.
Validación del Prototipo Inicial y Refinamiento Iterativo
El prototipo inicial fue sometido a un proceso de validación riguroso que incluyó tanto pruebas técnicas como evaluaciones de usabilidad con la participación de expertos en investigación cualitativa. Las pruebas técnicas se centraron en verificar la correcta implementación de las funcionalidades de IA, la estabilidad del sistema y su rendimiento bajo diferentes condiciones de carga. Por otro lado, las evaluaciones de usabilidad involucraron a usuarios representativos que interactuaron con el prototipo para completar tareas específicas, proporcionando retroalimentación cualitativa sobre la experiencia de usuario. Los resultados de esta validación inicial proporcionaron conocimientos invaluables que guiaron las iteraciones subsecuentes, identificando áreas de mejora tanto en aspectos técnicos como de usabilidad, las cuales se priorizaron para su implementación en ciclos posteriores.
Ecosistema Tecnológico y Herramientas Integradas
A medida que el prototipo evolucionaba más allá de su fase inicial, se construyó un robusto ecosistema tecnológico alrededor de él, integrando herramientas de código abierto especializadas para potenciar sus capacidades. Este enfoque estratégico permitió aprovechar tecnologías maduras y establecidas, evitando "reinventar la rueda" y acelerando significativamente el desarrollo.
• Interfaz de Usuario y Desarrollo Rápido: Streamlit fue seleccionado como el framework principal para la construcción de la interfaz de usuario. Su capacidad para crear aplicaciones web interactivas con Python de manera rápida y sencilla fue fundamental para el ciclo de prototipado iterativo y la presentación de resultados.
• Gestión de Modelos de IA: Ollama sirvió como el núcleo para la gestión y ejecución de modelos de IA locales. Se desarrolló un cliente personalizado (OllamaClient) que encapsulaba todas las interacciones con su API, permitiendo gestionar modelos, generar embeddings y procesar consultas de manera eficiente y centralizada.
• Procesamiento de Documentos: Se implementaron adaptadores para múltiples formatos de archivo (PDF, DOCX, CSV) utilizando bibliotecas especializadas como PyPDF2, python-docx y pandas, lo que permitió un procesamiento unificado y robusto independientemente del formato original del documento.
• Análisis Cualitativo Avanzado: Para ir más allá de la simple consulta y respuesta, y en línea con las técnicas identificadas en la revisión bibliográfica, se incorporaron bibliotecas como scikit-learn, NLTK y TextBlob. Estas herramientas permitieron implementar funcionalidades avanzadas de análisis cualitativo, como clustering de documentos, análisis de sentimiento y extracción de temas clave, tareas que tradicionalmente son manuales y laboriosas.
• Visualización de Redes Conceptuales: La biblioteca PyVis fue integrada para generar visualizaciones de redes interactivas. Esta funcionalidad permite al investigador explorar visualmente las relaciones entre los conceptos y temas identificados en los datos, una herramienta poderosa para la interpretación cualitativa que complementa el análisis textual y ayuda a descubrir patrones ocultos.
En resumen, el desarrollo del prototipo fue un proceso dinámico, deliberado y adaptativo, guiado por una metodología iterativa y validado constantemente por pruebas técnicas y retroalimentación de expertos. La construcción de un ecosistema tecnológico cohesivo, basado en herramientas de código abierto, no solo aceleró el desarrollo, sino que también aseguró que el prototipo final fuera una solución potente, flexible y profundamente alineada con las necesidades reales de la investigación cualitativa, sentando las bases para las fases posteriores de ajuste y optimización.